// Generated by CoffeeScript 1.2.1-pre
/*
@author Matt Crinklaw-Vogt
*/

define(["vendor/backbone", "./Templates", "./components/ComponentViewFactory", "vendor/keymaster", "ui/interactions/CutCopyPasteBindings", "model/system/Clipboard", "css!./res/css/OperatingTable.css"], function(Backbone, Templates, ComponentViewFactory, Keymaster, CutCopyPasteBindings, Clipboard, empty) {
  return Backbone.View.extend({
    className: "operatingTable",
    events: {
      "click": "clicked",
      "focused": "_focus"
    },
    initialize: function() {
      CutCopyPasteBindings.applyTo(this, "operatingTable");
      return this._clipboard = new Clipboard();
    },
    setModel: function(slide) {
      var prevModel;
      prevModel = this.model;
      if (this.model != null) this.model.off(null, null, this);
      this.model = slide;
      if (this.model != null) {
        this.model.on("change:components.add", this._componentAdded, this);
      }
      return this.render(prevModel);
    },
    clicked: function(e) {
      if (this.model != null) {
        this.model.get("components").forEach(function(component) {
          if (component.get("selected")) return component.set("selected", false);
        });
        this.$el.find(".editable").removeClass("editable").attr("contenteditable", false).trigger("editComplete");
      }
      return this._focus();
    },
    cut: function() {
      var item;
      item = this.model.lastSelection;
      if ((item != null)) {
        this._clipboard.set("item", item);
        this.model.remove(item);
        item.set("selected", false);
        return false;
      }
    },
    copy: function() {
      var item, newItem;
      item = this.model.lastSelection;
      if ((item != null)) {
        newItem = item.clone();
        newItem.set("x", item.get("x") + 25);
        newItem.set("selected", false);
        this._clipboard.set("item", newItem);
        return false;
      }
    },
    paste: function() {
      var item;
      if (this.$el.find(".editable").length !== 0) {
        return true;
      } else {
        item = this._clipboard.get("item");
        if (item != null) this.model.add(item.clone());
        return false;
      }
    },
    _focus: function() {
      if (Keymaster.getScope() !== "operatingTable") {
        return Keymaster.setScope("operatingTable");
      }
    },
    _componentAdded: function(model, component) {
      var view;
      view = ComponentViewFactory.createView(component);
      return this.$el.append(view.render());
    },
    render: function(prevModel) {
      var components,
        _this = this;
      if (prevModel != null) prevModel.trigger("unrender", true);
      if (this.model != null) {
        components = this.model.get("components");
        components.forEach(function(component) {
          var view;
          view = ComponentViewFactory.createView(component);
          return _this.$el.append(view.render());
        });
      }
      return this.$el;
    }
  });
});
